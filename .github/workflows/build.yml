name: hosted-pure-workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  job:
    name: ${{ matrix.os }}-hosted-pure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows

    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src_repo

      - uses: actions/checkout@v4
        with:
          repository: 'microsoft/vcpkg'
          path: vcpkg
          submodules: true
          ref: "2023.02.24"

      - uses: lukka/get-cmake@latest

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.12.1

      - name: Confirm Ninja installation
        run: |
          echo "Ninja path: $(where ninja)"
          ninja --version
        shell: cmd

      - name: Restore vcpkg and its artifacts
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: |
            ${{ hashFiles('src_repo/vcpkg.json') }}-${{ matrix.triplet }}-cli11-fix

      - name: Show content of workspace after cache has been restored
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Download ScyllaHide
        run: ./tools/setup-scylla.ps1
        shell: pwsh
        working-directory: "${{ github.workspace }}/src_repo"

      - name: Install dependencies and generate project files
        run: |
          cmake -S "${{ github.workspace }}/src_repo" -B "${{ env.CMAKE_BUILD_DIR }}" -GNinja \
            -DCMAKE_MAKE_PROGRAM="C:/ProgramData/Chocolatey/bin/ninja.exe" \
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
            -DMODENGINE_DIST_SCYLLA=1 \
            -DMODENGINE_CRASH_REPORT_URL=${{ secrets.MODENGINE_CRASH_REPORT_URL }} \
            -DCPACK_GENERATOR=ZIP \
            -DVCPKG_OVERLAY_PORTS=src_repo/third-party/vcpkg-overlays \
            -DCMAKE_BUILD_TYPE=MinSizeRel
        shell: bash

      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --target package
        shell: bash

      - name: Show CLI11 config log if generation fails
        if: failure()
        run: |
          echo "CLI11 failure log:"
          cat "${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/vcpkg/blds/cli11/config-x64-windows-out.log" || echo "No log found"
        shell: bash

      - name: Show content of workspace at its completion
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name == 'push' }}
        with:
          name: modengine-${{ github.sha }}
          path: ${{ env.CMAKE_BUILD_DIR }}/ModEngine-*-win64.*
