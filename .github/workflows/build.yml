# Copyright (c) 2021 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT

# A GitHub workflow using CMake, Ninja, and vcpkg.
name: hosted-pure-workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  job:
    name: ${{ matrix.os }}-hosted-pure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src_repo

      - uses: actions/checkout@v4
        with:
          repository: 'microsoft/vcpkg'
          path: vcpkg
          submodules: true
          ref: "2024.11.16"

      - uses: lukka/get-cmake@latest

      - name: Restore vcpkg and its artifacts
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: vcpkg-${{ matrix.triplet }}-${{ hashFiles('src_repo/vcpkg.json') }}-2024.11.16-v5
          restore-keys: |
            vcpkg-${{ matrix.triplet }}-${{ hashFiles('src_repo/vcpkg.json') }}-

      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.12.1

      - name: Find Ninja executable
        id: find_ninja
        run: |
          $ninja_path = (Get-Command ninja).Source
          if (-not $ninja_path) { Write-Error "Ninja not found"; exit 1 }
          echo "NINJA_PATH=$ninja_path" >> $env:GITHUB_ENV
          echo "Ninja found at: $ninja_path"
        shell: pwsh

      - name: Add Ninja to PATH
        run: echo "${{ env.NINJA_PATH || dirname }}" >> $GITHUB_PATH
        shell: bash

      - name: Verify Ninja installation
        run: |
          where ninja
          ninja --version || exit 1
        shell: cmd

      - name: Bootstrap vcpkg
        run: |
          if (!(Test-Path "${{ env.VCPKG_ROOT }}/vcpkg.exe")) {
            & "${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.bat" -disableMetrics
            if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          }
          & "${{ env.VCPKG_ROOT }}/vcpkg.exe" version
        shell: pwsh

      - name: Debug environment
        run: |
          where ninja
          where cl
          ninja --version
          cl
          echo "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
          echo "CMAKE_BUILD_DIR: ${{ env.CMAKE_BUILD_DIR }}"
          echo "NINJA_PATH: ${{ env.NINJA_PATH }}"
          dir "${{ env.VCPKG_ROOT }}"
          dir "${{ env.CMAKE_BUILD_DIR }}"
        shell: cmd
        continue-on-error: true

      - name: Download ScyllaHide
        run: ./tools/setup-scylla.ps1
        shell: pwsh
        working-directory: "${{ github.workspace }}/src_repo"

      - name: Install dependencies and generate project files
        run: |
          cmake -S "${{ github.workspace }}/src_repo" -B "${{ env.CMAKE_BUILD_DIR }}" -G "Ninja" \
            -DCMAKE_MAKE_PROGRAM="${{ env.NINJA_PATH }}" \
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
            -DMODENGINE_DIST_SCYLLA=1 \
            -DMODENGINE_CRASH_REPORT_URL=${{ secrets.MODENGINE_CRASH_REPORT_URL }} \
            -DCPACK_GENERATOR=ZIP \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DVCPKG_VERBOSE=ON \
            -DVCPKG_INSTALL_OPTIONS=--debug
        shell: bash

      - name: Build and package
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --target package --config MinSizeRel --verbose
        shell: bash

      - name: Show workspace content after build
        run: dir /s
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: modengine-${{ github.sha }}
          path: ${{ env.CMAKE_BUILD_DIR }}/ModEngine-*.zip
        if: ${{ github.event_name == 'push' }}